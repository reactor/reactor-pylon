/*
 * Copyright (c) 2011-2016 Pivotal Software Inc, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
project('docs') {
	apply plugin: "java"
	apply plugin: 'org.asciidoctor.convert'

	task api(type: Javadoc) {
		group = "Reactor Framework Javadoc"

		description = "Generates aggregated Javadoc API documentation."
		title = "${rootProject.description} ${version} API"

		if (JavaVersion.current().isJava8Compatible()) {
			compileTestJava.options.compilerArgs += "-parameters"
			tasks.withType(Javadoc) {
				options.addStringOption('Xdoclint:none', '-quiet')
			}
		}

		dependsOn {
			rootProject.subprojects.collect {
				it.tasks.getByName("jar")
			}
		}
		options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
		options.author = true
		options.header = rootProject.description
		options.overview = "src/api/overview.html"
		//options.stylesheetFile = file("src/api/stylesheet.css")
		options.links(rootProject.ext.javadocLinks)

		source rootProject.subprojects.collect { project ->
			project.sourceSets.main.allJava
		}

		maxMemory = "1024m"
		destinationDir = new File(buildDir, "api")

		doFirst {
			classpath = files(rootProject.subprojects.collect { it.sourceSets.main.compileClasspath })
		}
	}



	asciidoctor {
		sources {
			include "index.asciidoc"
		}
		outputDir file("$buildDir/asciidoc")
		backends = ['html5', 'pdf']
		logDocuments = true
		options = [
				doctype: 'book'
		]
		attributes docinfo: '',
				toc2: '',
				'compat-mode': '',
				stylesdir: "stylesheets/",
				stylesheet: 'golo.css',
				appversion: "$version",
				'source-highlighter': 'coderay'

		doLast {
			file("$outputDir/pdf/index.pdf").renameTo("$outputDir/pdf/reference-guide-${version}.pdf")
		}

	}

}

